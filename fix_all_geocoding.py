#!/usr/bin/env python3
"""
Script ROBUSTE pour fixer les coordonn√©es manquantes dans la table location
Utilise Jageocoder avec retry, checkpoint, et reprise apr√®s √©chec
"""

import os
import sys
import time
import json
import logging
import signal
from datetime import datetime
from typing import Optional, Tuple, List
from dotenv import load_dotenv
from supabase import create_client

# Configuration du logging
log_filename = f'geocoding_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(log_filename, encoding='utf-8')
    ]
)
logger = logging.getLogger('GeocodingFixer')

load_dotenv()

class GeocodingFixer:
    """Fixe les coordonn√©es manquantes avec robustesse et reprise apr√®s √©chec"""
    
    def __init__(self, checkpoint_file='geocoding_checkpoint.json'):
        self.checkpoint_file = checkpoint_file
        self.checkpoint_data = self.load_checkpoint()
        self.interrupted = False
        
        # Gestion de Ctrl+C propre
        signal.signal(signal.SIGINT, self.handle_interrupt)
        
        # Stats
        self.stats = self.checkpoint_data.get('stats', {
            'total': 0,
            'fixed': 0, 
            'failed': 0,
            'skipped': 0,
            'processed_ids': []
        })
        
        logger.info(f"üìù Fichier de log: {log_filename}")
        
        # Connexion Supabase avec retry
        self.init_supabase_with_retry()
        
        # Jageocoder avec fallback
        self.init_jageocoder_with_retry()
    
    def handle_interrupt(self, signum, frame):
        """Gestion propre de l'interruption (Ctrl+C)"""
        logger.warning("\n‚ö†Ô∏è Interruption d√©tect√©e - Sauvegarde en cours...")
        self.interrupted = True
        self.save_checkpoint()
        logger.info("üíæ Checkpoint sauvegard√©. Relancez le script pour reprendre.")
        sys.exit(0)
    
    def init_supabase_with_retry(self, max_retries=3):
        """Initialise Supabase avec retry"""
        for attempt in range(max_retries):
            try:
                self.supabase = create_client(
                    os.getenv('SUPABASE_URL'),
                    os.getenv('SUPABASE_KEY')
                )
                # Test connection
                self.supabase.table('place').select('id').limit(1).execute()
                logger.info("‚úÖ Connexion Supabase √©tablie")
                return
            except Exception as e:
                logger.warning(f"Tentative {attempt+1}/{max_retries} √©chou√©e: {e}")
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)  # Exponential backoff
                else:
                    logger.error("‚ùå Impossible de se connecter √† Supabase")
                    sys.exit(1)
    
    def init_jageocoder_with_retry(self, max_retries=3):
        """Initialise Jageocoder avec retry et fallback"""
        try:
            import jageocoder
            self.jageocoder = jageocoder
            
            for attempt in range(max_retries):
                try:
                    jageocoder.init(url='https://jageocoder.info-proto.com/jsonrpc')
                    # Test avec une adresse simple
                    test = jageocoder.search("Tokyo")
                    if test:
                        logger.info("‚úÖ Jageocoder initialis√© (serveur distant)")
                        self.jageocoder_available = True
                        return
                except Exception as e:
                    logger.warning(f"Jageocoder tentative {attempt+1}/{max_retries}: {e}")
                    time.sleep(2)
                    
            logger.warning("‚ö†Ô∏è Jageocoder indisponible - Mode d√©grad√© activ√©")
            self.jageocoder_available = False
            
        except ImportError:
            logger.error("‚ùå Jageocoder n'est pas install√©!")
            logger.error("üëâ Installation: pip install jageocoder")
            sys.exit(1)
    
    def load_checkpoint(self) -> dict:
        """Charge le checkpoint pour reprendre apr√®s interruption"""
        if os.path.exists(self.checkpoint_file):
            try:
                with open(self.checkpoint_file, 'r') as f:
                    data = json.load(f)
                    logger.info(f"üìÇ Checkpoint trouv√©: {data['stats']['fixed']} POIs d√©j√† trait√©s")
                    return data
            except Exception as e:
                logger.warning(f"Checkpoint corrompu: {e}")
        return {'stats': {'total': 0, 'fixed': 0, 'failed': 0, 'skipped': 0, 'processed_ids': []}}
    
    def save_checkpoint(self):
        """Sauvegarde l'√©tat pour pouvoir reprendre"""
        try:
            with open(self.checkpoint_file, 'w') as f:
                json.dump({
                    'stats': self.stats,
                    'timestamp': datetime.now().isoformat()
                }, f, indent=2)
            logger.debug(f"Checkpoint sauvegard√©: {self.stats['fixed']} fixes")
        except Exception as e:
            logger.error(f"Erreur sauvegarde checkpoint: {e}")
    
    def preprocess_address(self, address: str) -> str:
        """Pr√©traite l'adresse pour optimiser Jageocoder"""
        if not address:
            return ""
        
        # Format typique: "28-6 Udagawacho, Shibuya City, Tokyo 150-0042, Japan"
        # Jageocoder fonctionne mieux sans ", Japan" √† la fin
        address = address.replace(", Japan", "").strip()
        
        # Normaliser Tokyo
        address = address.replace("T≈çky≈ç", "Tokyo")
        address = address.replace("Tokyo Metropolis", "Tokyo")
        address = address.replace("K≈çt≈ç-ku", "Koto-ku")
        address = address.replace("≈åta-ku", "Ota-ku")
        address = address.replace("Ch≈´≈ç-ku", "Chuo-ku")
        
        return address.strip()
    
    def geocode_with_retry(self, address: str, max_retries: int = 3) -> Optional[Tuple[float, float]]:
        """Geocode avec retry automatique"""
        if not address or not self.jageocoder_available:
            return None
        
        # Nettoyer l'adresse
        processed = self.preprocess_address(address)
        logger.debug(f"Adresse originale: {address}")
        logger.debug(f"Adresse trait√©e: {processed}")
        
        for attempt in range(max_retries):
            try:
                results = self.jageocoder.search(processed)
                
                if results and len(results) > 0:
                    node = results[0].get('node', {})
                    if 'x' in node and 'y' in node:
                        lat, lng = float(node['y']), float(node['x'])
                        
                        # Validation Tokyo (√©largi pour inclure la p√©riph√©rie)
                        if 35.4 < lat < 36.0 and 139.3 < lng < 140.1:
                            logger.debug(f"Coordonn√©es trouv√©es: lat={lat}, lng={lng}")
                            return lat, lng
                        else:
                            logger.warning(f"Coordonn√©es hors zone Tokyo: {lat}, {lng}")
                        
                return None  # Pas trouv√©
                
            except Exception as e:
                logger.debug(f"Tentative {attempt+1} √©chou√©e pour '{processed[:30]}...': {e}")
                if attempt < max_retries - 1:
                    time.sleep(1)  # Pause avant retry
                    
        return None
    
    def get_pois_batch(self, batch_size: int = 100, offset: int = 0, platform: Optional[str] = None) -> List[dict]:
        """R√©cup√®re les POIs par batch pour √©conomiser la m√©moire"""
        try:
            query = self.supabase.table('place').select('id, name, address, latitude, longitude, platform')
            
            # Filtrer par platform si sp√©cifi√©
            if platform and platform != 'all':
                query = query.eq('platform', platform)
            
            # POIs sans coordonn√©es ou avec 0,0
            query = query.or_('latitude.is.null,longitude.is.null,and(latitude.eq.0,longitude.eq.0)')
            query = query.range(offset, offset + batch_size - 1)
            
            response = query.execute()
            return response.data
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration batch: {e}")
            return []
    
    def update_poi_with_retry(self, poi_id: int, lat: float, lng: float, max_retries: int = 3) -> bool:
        """Met √† jour un POI avec retry"""
        for attempt in range(max_retries):
            try:
                self.supabase.table('place').update({
                    'latitude': lat,
                    'longitude': lng
                }).eq('id', poi_id).execute()
                return True
            except Exception as e:
                logger.warning(f"Tentative {attempt+1} √©chou√©e pour POI {poi_id}: {e}")
                if attempt < max_retries - 1:
                    time.sleep(1)
                    # Reconnecter si n√©cessaire
                    if "connection" in str(e).lower():
                        self.init_supabase_with_retry()
        return False
    
    def display_progress(self, current: int, total: int, fixed: int, failed: int):
        """Affiche une barre de progression"""
        if total == 0:
            return
            
        percent = current * 100 / total if total > 0 else 0
        bar_length = 40
        filled_length = int(bar_length * current // total) if total > 0 else 0
        bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
        
        print(f'\rüìä |{bar}| {percent:.1f}% ({current}/{total}) ‚úÖ {fixed} ‚ùå {failed}', end='', flush=True)
    
    def process_all(self, limit: Optional[int] = None, test_mode: bool = False, platform: str = 'all'):
        """Traite tous les POIs avec reprise apr√®s √©chec"""
        print("\n" + "="*70)
        print("     üóæ GEOCODING FIXER (ROBUST)")
        if platform != 'all':
            print(f"     Platform: {platform}")
        print("="*70)
        
        batch_size = 100
        offset = 0
        total_processed = 0
        start_time = time.time()
        
        # Si reprise, afficher info
        if self.stats['processed_ids']:
            print(f"üîÑ Reprise: {len(self.stats['processed_ids'])} POIs d√©j√† trait√©s")
            print(f"   ‚úÖ {self.stats['fixed']} fixes")
            print(f"   ‚ùå {self.stats['failed']} √©checs")
            print("-"*70)
        
        while True:
            if self.interrupted:
                break
                
            # R√©cup√©rer un batch
            pois = self.get_pois_batch(batch_size, offset, platform)
            
            if not pois or (limit and total_processed >= limit):
                break
            
            for poi in pois:
                if self.interrupted:
                    break
                    
                # Skip si d√©j√† trait√© (reprise apr√®s crash)
                if poi['id'] in self.stats['processed_ids']:
                    self.stats['skipped'] += 1
                    continue
                
                # Skip si coordonn√©es valides
                if (poi.get('latitude') and poi.get('longitude') and 
                    poi['latitude'] != 0 and poi['longitude'] != 0):
                    self.stats['skipped'] += 1
                    self.stats['processed_ids'].append(poi['id'])
                    continue
                
                # Skip si pas d'adresse
                if not poi.get('address'):
                    self.stats['failed'] += 1
                    self.stats['processed_ids'].append(poi['id'])
                    logger.warning(f"Pas d'adresse pour POI {poi['id']}: {poi['name'][:40]}")
                    continue
                
                # Geocoder avec retry
                coords = self.geocode_with_retry(poi['address'])
                
                if coords:
                    lat, lng = coords
                    
                    if not test_mode:
                        if self.update_poi_with_retry(poi['id'], lat, lng):
                            self.stats['fixed'] += 1
                            logger.info(f"‚úÖ POI {poi['id']}: {poi['name'][:40]} ({poi.get('platform')}): {lat:.6f}, {lng:.6f}")
                        else:
                            self.stats['failed'] += 1
                            logger.error(f"‚ùå √âchec update POI {poi['id']}")
                    else:
                        self.stats['fixed'] += 1
                        logger.info(f"üß™ TEST: {poi['name'][:40]} ‚Üí {lat:.6f}, {lng:.6f}")
                else:
                    self.stats['failed'] += 1
                    logger.debug(f"Geocoding √©chou√© pour: {poi['address']}")
                
                # Marquer comme trait√©
                self.stats['processed_ids'].append(poi['id'])
                total_processed += 1
                
                # Afficher progress
                self.display_progress(total_processed, 
                                    total_processed + 100,  # Estimation
                                    self.stats['fixed'], 
                                    self.stats['failed'])
                
                # Sauvegarder checkpoint tous les 50 POIs
                if total_processed % 50 == 0:
                    self.save_checkpoint()
                    print()  # Nouvelle ligne
                    logger.info(f"üíæ Checkpoint sauvegard√© ({self.stats['fixed']} fixes)")
                
                if limit and total_processed >= limit:
                    break
            
            offset += batch_size
        
        # Clear progress bar
        print("\n")
        
        # Sauvegarde finale
        self.save_checkpoint()
        
        # Calcul dur√©e
        duration = time.time() - start_time
        
        # R√©sum√©
        print("\n" + "="*70)
        print("                    üìä R√âSULTATS FINAUX")
        print("="*70)
        print(f"""
  üéØ Total trait√©:     {total_processed:>6}
  ‚úÖ Corrig√©s:         {self.stats['fixed']:>6} ({self.stats['fixed']*100/max(total_processed,1):.1f}%)
  ‚è≠Ô∏è  Skipp√©s:          {self.stats['skipped']:>6}
  ‚ùå √âchou√©s:          {self.stats['failed']:>6}
  
  ‚è±Ô∏è  Dur√©e:            {int(duration//60)}m {int(duration%60)}s
  ‚ö° Vitesse:          {total_processed/max(duration,1):.1f} POIs/sec
  
  üìù Log complet:      {log_filename}
        """)
        print("="*70)
        
        if self.stats['fixed'] > 0:
            print(f"\nüéâ {self.stats['fixed']} POIs ont maintenant des coordonn√©es pr√©cises!")
        
        # Nettoyer checkpoint si tout est fini et pas en mode test
        if not self.interrupted and not test_mode and total_processed > 0:
            if input("\nüóëÔ∏è Supprimer le checkpoint? (y/n): ").lower() == 'y':
                try:
                    os.remove(self.checkpoint_file)
                    logger.info("Checkpoint supprim√©")
                except:
                    pass

def main():
    import argparse
    
    parser = argparse.ArgumentParser(
        description='üóæ Fix les coordonn√©es manquantes avec Jageocoder (ROBUST)'
    )
    parser.add_argument(
        '--limit', 
        type=int, 
        help='Limiter le nombre de POIs √† traiter'
    )
    parser.add_argument(
        '--test', 
        action='store_true', 
        help='Mode test - affiche sans sauvegarder'
    )
    parser.add_argument(
        '--platform',
        type=str,
        choices=['tokyo_cheapo', 'google_places', 'all'],
        default='all',
        help='Platform √† traiter (default: all)'
    )
    parser.add_argument(
        '--reset', 
        action='store_true', 
        help='Reset le checkpoint pour recommencer'
    )
    
    args = parser.parse_args()
    
    # Reset checkpoint si demand√©
    if args.reset and os.path.exists('geocoding_checkpoint.json'):
        os.remove('geocoding_checkpoint.json')
        print("‚úÖ Checkpoint r√©initialis√©")
    
    # V√©rifier que jageocoder est install√©
    try:
        import jageocoder
    except ImportError:
        print("\n‚ùå Jageocoder n'est pas install√©!")
        print("\nüì¶ Installation:")
        print("   pip install jageocoder")
        print("\nüìö Plus d'infos: https://github.com/t-sagara/jageocoder")
        sys.exit(1)
    
    # Lancer le fix
    fixer = GeocodingFixer()
    fixer.process_all(
        limit=args.limit, 
        test_mode=args.test,
        platform=args.platform
    )

if __name__ == "__main__":
    main()