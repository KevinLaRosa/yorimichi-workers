#!/usr/bin/env python3
"""
Script pour supprimer les doublons en contournant les politiques RLS
en utilisant la Service Role Key et une requ√™te RPC
"""

import os
import sys
from dotenv import load_dotenv
from supabase import create_client, Client
import requests

# Charger les variables d'environnement
if os.path.exists('.env.local'):
    load_dotenv('.env.local')
else:
    load_dotenv()

def main():
    # Configuration Supabase
    supabase_url = os.getenv('SUPABASE_URL') or os.getenv('NEXT_PUBLIC_SUPABASE_URL')
    service_role_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
    
    if not supabase_url or not service_role_key:
        print("‚ùå Variables d'environnement Supabase manquantes")
        print("V√©rifiez NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY")
        sys.exit(1)
    
    print("\n" + "="*60)
    print("üóëÔ∏è SUPPRESSION DES DOUBLONS (Service Role)")
    print("="*60)
    
    # Utiliser l'API REST directement avec la Service Role Key
    headers = {
        'apikey': service_role_key,
        'Authorization': f'Bearer {service_role_key}',
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
    }
    
    # 1. R√©cup√©rer les doublons
    url = f"{supabase_url}/rest/v1/locations"
    params = {
        'enrichment_status': 'eq.duplicate',
        'select': 'id,name'
    }
    
    response = requests.get(url, headers=headers, params=params)
    
    if response.status_code != 200:
        print(f"‚ùå Erreur lors de la r√©cup√©ration: {response.text}")
        return
    
    duplicates = response.json()
    print(f"\nüìä Total doublons trouv√©s: {len(duplicates)}")
    
    if not duplicates:
        print("‚úÖ Aucun doublon √† supprimer!")
        return
    
    # 2. Afficher les exemples
    print("\nExemples de doublons √† supprimer:")
    for i, dup in enumerate(duplicates[:10], 1):
        print(f"  {i}. {dup['name']}")
    
    if len(duplicates) > 10:
        print(f"  ... et {len(duplicates) - 10} autres")
    
    # 3. Confirmer
    confirm = input("\nVoulez-vous vraiment supprimer tous ces doublons? (yes/no): ")
    
    if confirm.lower() != 'yes':
        print("Annul√©")
        return
    
    # 4. Supprimer un par un
    deleted = 0
    errors = 0
    
    print("\nüîÑ Suppression en cours...")
    for dup in duplicates:
        try:
            # Supprimer via l'API REST avec Service Role
            delete_url = f"{supabase_url}/rest/v1/locations?id=eq.{dup['id']}"
            
            response = requests.delete(delete_url, headers=headers)
            
            if response.status_code in [200, 204]:
                deleted += 1
                print(f"  ‚úÖ Supprim√©: {dup['name']}")
            else:
                errors += 1
                print(f"  ‚ùå Erreur pour {dup['name']}: {response.status_code}")
                if response.text:
                    print(f"     D√©tails: {response.text[:100]}")
                
        except Exception as e:
            errors += 1
            print(f"  ‚ùå Exception pour {dup['name']}: {str(e)[:100]}")
    
    # 5. R√©sum√©
    print("\n" + "="*60)
    print("üìä R√âSUM√â")
    print("="*60)
    print(f"Total trait√©s: {len(duplicates)}")
    print(f"‚úÖ Supprim√©s: {deleted}")
    print(f"‚ùå Erreurs: {errors}")
    
    if deleted > 0:
        print(f"\n‚ú® {deleted} doublons ont √©t√© supprim√©s avec succ√®s!")


if __name__ == "__main__":
    main()